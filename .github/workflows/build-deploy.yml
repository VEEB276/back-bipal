name: Build and Deploy Spring Boot App

on:
  push:
    branches:
      - pipeline
  pull_request:
    types:
      - closed
    branches:
      - develop
  workflow_dispatch:
    inputs:
      server_host:
        description: 'Dirección IP o hostname del servidor'
        required: true
      server_username:
        description: 'Nombre de usuario para SSH'
        required: true
      ssh_key:
        description: 'Clave SSH (formato texto)'
        required: true
        type: string

jobs:
  build:
    # Solo ejecutar el workflow si el PR fue merged o estamos en la rama pipeline
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout código
        uses: actions/checkout@v3
      
      - name: Configurar JDK
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Compilar con Maven
        run: mvn -B clean package -DskipTests
      
      # - name: Ejecutar tests
      #   run: mvn -B test
      
      - name: Guardar JAR como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: target/*.jar
          retention-days: 1
      
      - name: Construir imagen Docker
        run: |
          docker build -t bipal-backend:${{ github.sha }} .
          docker tag bipal-backend:${{ github.sha }} bipal-backend:latest
      
      - name: Guardar imagen Docker
        run: |
          mkdir -p ./docker-image
          docker save bipal-backend:latest > ./docker-image/bipal-backend.tar
      
      - name: Guardar imagen como artefacto
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: ./docker-image/bipal-backend.tar
          retention-days: 1
      
      - name: Guardar archivos de despliegue
        uses: actions/upload-artifact@v4
        with:
          name: deploy-files
          path: |
            .github/docker-compose.yml
            .github/deploy.sh
          retention-days: 1
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: http://${{ github.event.inputs.server_host || 'servidor' }}:8080/bipal
    
    # Este job requiere aprobación manual
    if: ${{ always() }}
    
    steps:
      - name: Descargar imagen Docker
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: ./docker-image
      
      - name: Descargar archivos de despliegue
        uses: actions/download-artifact@v4
        with:
          name: deploy-files
          path: ./deploy-files
      
      - name: Preparar clave SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ github.event.inputs.ssh_key }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ github.event.inputs.server_host }} >> ~/.ssh/known_hosts
      
      - name: Desplegar en servidor
        run: |
          # Crear directorio en servidor si no existe
          ssh ${{ github.event.inputs.server_username }}@${{ github.event.inputs.server_host }} "mkdir -p /tmp/bipal-deploy"
          
          # Transferir archivos
          scp ./docker-image/bipal-backend.tar ${{ github.event.inputs.server_username }}@${{ github.event.inputs.server_host }}:/tmp/bipal-deploy/
          scp ./deploy-files/docker-compose.yml ${{ github.event.inputs.server_username }}@${{ github.event.inputs.server_host }}:/tmp/bipal-deploy/
          
          # Cargar la imagen Docker en el servidor
          ssh ${{ github.event.inputs.server_username }}@${{ github.event.inputs.server_host }} "cd /tmp/bipal-deploy && docker load < bipal-backend.tar"
          
          # Ejecutar con docker-compose
          ssh ${{ github.event.inputs.server_username }}@${{ github.event.inputs.server_host }} "cd /tmp/bipal-deploy && docker-compose down && docker-compose up -d"
